name: Update with latest flux release
on:
  pull_request: []
  schedule:
    - cron:  '0 10 * * *'

jobs:
  get-release-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update Version
        id: check
        run: python script/get_releases.py packages/flux-core
      - name: Commit latest release version
        if: steps.check.outputs.version != ''
        env:
          version: ${{ steps.check.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Found new version ${version}"
          echo "::group::flux-core package.py"
          cat packages/flux-core/package.py
          echo "::endgroup::"          
          export BRANCH_FROM="release/${version}"
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git branch
          git checkout -b "${BRANCH_FROM}" || git checkout "${BRANCH_FROM}"
          git branch
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@users.noreply.github.com"
          git add packages/*
          if git diff-index --quiet HEAD --; then
             printf "No changes\n"
          else
             printf "Changes\n"
             git commit -m "Automated deployment to update software database $(date '+%Y-%m-%d')"
             git push origin "${BRANCH_FROM}"
          fi
          echo "PULL_REQUEST_FROM_BRANCH=${BRANCH_FROM}" >> $GITHUB_ENV
      - name: Open Pull Request
        uses: vsoch/pull-request-action@1.0.12
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST_BRANCH: "main"
